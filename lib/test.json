{
  _readableState: {
    objectMode: false,
    highWaterMark: 16384,
    buffer: [],
    length: 0,
    pipes: null,
    pipesCount: 0,
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    defaultEncoding: 'utf8',
    ranOut: false,
    awaitDrain: 0,
    readingMore: false,
    decoder: null,
    encoding: null
  },
  readable: true,
  domain: {
    domain: null,
    _events: {
      error: [
        Function
        :
        onError
      ]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    members: [
      [Circular],
      [Object]
    ]
  },
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: {
    _connecting: false,
    _hadError: false,
    _handle: {
      fd: 13,
      reading: true,
      owner: [Circular],
      onread: [
        Function
        :
        onread
      ],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: {
      objectMode: false,
      highWaterMark: 16384,
      buffer: [],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      resumeScheduled: false
    },
    readable: true,
    domain: null,
    _events: {
      end: [Object],
      finish: [
        Function
        :
        onSocketFinish
      ],
      _socketEnd: [
        Function
        :
        onSocketEnd
      ],
      drain: [Object],
      timeout: [Function],
      error: [
        Function
        :
        socketOnError
      ],
      close: [Object],
      data: [
        Function
        :
        socketOnData
      ]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: {
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    bytesRead: 59,
    _bytesDispatched: 0,
    _pendingData: null,
    _pendingEncoding: '',
    server: {
      domain: null,
      _events: [Object],
      _eventsCount: 9,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _connectionKey: '6::::8080'
    },
    _idleTimeout: 120000,
    _idleNext: {
      _idleNext: [Circular],
      _idlePrev: [Circular]
    },
    _idlePrev: {
      _idleNext: [Circular],
      _idlePrev: [Circular]
    },
    _idleStart: 28468635,
    parser: {
      '0': [
        Function
        :
        parserOnHeaders
      ],
      '1': [
        Function
        :
        parserOnHeadersComplete
      ],
      '2': [
        Function
        :
        parserOnBody
      ],
      '3': [
        Function
        :
        parserOnMessageComplete
      ],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [Circular],
      maxHeaderPairs: 2000,
      onIncoming: [
        Function
        :
        parserOnIncoming
      ]
    },
    _paused: false,
    read: [Function],
    _consuming: true,
    _httpMessage: {
      domain: [Object],
      _events: [Object],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _hangupClose: false,
      _headerSent: false,
      socket: [Circular],
      connection: [Circular],
      _header: null,
      _headers: null,
      _headerNames: {},
      log: [Object],
      _time: 1426942493324,
      acceptable: [Object],
      formatters: [Object],
      req: [Circular],
      serverName: 'MyApp',
      version: undefined,
      methods: [Object]
    }
  },
  connection: {
    _connecting: false,
    _hadError: false,
    _handle: {
      fd: 13,
      reading: true,
      owner: [Circular],
      onread: [
        Function
        :
        onread
      ],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: {
      objectMode: false,
      highWaterMark: 16384,
      buffer: [],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      resumeScheduled: false
    },
    readable: true,
    domain: null,
    _events: {
      end: [Object],
      finish: [
        Function
        :
        onSocketFinish
      ],
      _socketEnd: [
        Function
        :
        onSocketEnd
      ],
      drain: [Object],
      timeout: [Function],
      error: [
        Function
        :
        socketOnError
      ],
      close: [Object],
      data: [
        Function
        :
        socketOnData
      ]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: {
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    bytesRead: 59,
    _bytesDispatched: 0,
    _pendingData: null,
    _pendingEncoding: '',
    server: {
      domain: null,
      _events: [Object],
      _eventsCount: 9,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _connectionKey: '6::::8080'
    },
    _idleTimeout: 120000,
    _idleNext: {
      _idleNext: [Circular],
      _idlePrev: [Circular]
    },
    _idlePrev: {
      _idleNext: [Circular],
      _idlePrev: [Circular]
    },
    _idleStart: 28468635,
    parser: {
      '0': [
        Function
        :
        parserOnHeaders
      ],
      '1': [
        Function
        :
        parserOnHeadersComplete
      ],
      '2': [
        Function
        :
        parserOnBody
      ],
      '3': [
        Function
        :
        parserOnMessageComplete
      ],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [Circular],
      maxHeaderPairs: 2000,
      onIncoming: [
        Function
        :
        parserOnIncoming
      ]
    },
    _paused: false,
    read: [Function],
    _consuming: true,
    _httpMessage: {
      domain: [Object],
      _events: [Object],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _hangupClose: false,
      _headerSent: false,
      socket: [Circular],
      connection: [Circular],
      _header: null,
      _headers: null,
      _headerNames: {},
      log: [Object],
      _time: 1426942493324,
      acceptable: [Object],
      formatters: [Object],
      req: [Circular],
      serverName: 'MyApp',
      version: undefined,
      methods: [Object]
    }
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: {
    host: 'localhost:8080',
    connection: 'close'
  },
  rawHeaders: [
    'host',
    'localhost:8080',
    'Connection',
    'close'
  ],
  trailers: {},
  rawTrailers: [],
  _pendings: [],
  _pendingIndex: 0,
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: {
    _connecting: false,
    _hadError: false,
    _handle: {
      fd: 13,
      reading: true,
      owner: [Circular],
      onread: [
        Function
        :
        onread
      ],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: {
      objectMode: false,
      highWaterMark: 16384,
      buffer: [],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      resumeScheduled: false
    },
    readable: true,
    domain: null,
    _events: {
      end: [Object],
      finish: [
        Function
        :
        onSocketFinish
      ],
      _socketEnd: [
        Function
        :
        onSocketEnd
      ],
      drain: [Object],
      timeout: [Function],
      error: [
        Function
        :
        socketOnError
      ],
      close: [Object],
      data: [
        Function
        :
        socketOnData
      ]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: {
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    bytesRead: 59,
    _bytesDispatched: 0,
    _pendingData: null,
    _pendingEncoding: '',
    server: {
      domain: null,
      _events: [Object],
      _eventsCount: 9,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _connectionKey: '6::::8080'
    },
    _idleTimeout: 120000,
    _idleNext: {
      _idleNext: [Circular],
      _idlePrev: [Circular]
    },
    _idlePrev: {
      _idleNext: [Circular],
      _idlePrev: [Circular]
    },
    _idleStart: 28468635,
    parser: {
      '0': [
        Function
        :
        parserOnHeaders
      ],
      '1': [
        Function
        :
        parserOnHeadersComplete
      ],
      '2': [
        Function
        :
        parserOnBody
      ],
      '3': [
        Function
        :
        parserOnMessageComplete
      ],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [Circular],
      maxHeaderPairs: 2000,
      onIncoming: [
        Function
        :
        parserOnIncoming
      ]
    },
    _paused: false,
    read: [Function],
    _consuming: true,
    _httpMessage: {
      domain: [Object],
      _events: [Object],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _hangupClose: false,
      _headerSent: false,
      socket: [Circular],
      connection: [Circular],
      _header: null,
      _headers: null,
      _headerNames: {},
      log: [Object],
      _time: 1426942493324,
      acceptable: [Object],
      formatters: [Object],
      req: [Circular],
      serverName: 'MyApp',
      version: undefined,
      methods: [Object]
    }
  },
  _consuming: false,
  _dumped: false,
  log: {
    domain: null,
    _events: {},
    _eventsCount: 0,
    _maxListeners: undefined,
    _level: 20,
    streams: [
      [Object],
      [Object]
    ],
    serializers: {
      err: [
        Function
        :
        err
      ],
      req: [
        Function
        :
        req
      ],
      res: [
        Function
        :
        res
      ],
      client_req: [
        Function
        :
        clientReq
      ],
      client_res: [
        Function
        :
        clientRes
      ]
    },
    src: false,
    fields: {
      name: 'MyApp',
      hostname: 'dobyeongsuui-iMac.local',
      pid: 60569
    }
  },
  _time: 1426942493324,
  serverName: 'MyApp',
  _version: '*',
  _url: {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/',
    path: '/',
    href: '/'
  },
  _cacheURL: '/',
  params: {},
  context: {},
  route: {
    path: '/',
    method: 'GET',
    versions: [],
    name: 'get'
  },
  _dtraceId: 1,
  _anonFuncCount: 1,
  _currentRoute: 'get',
  _currentHandler: 'handler-0',
  _timerMap: {
    'handler-0': [
      28468,
      639484566
    ]
  }
}
